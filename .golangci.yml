# This file contains all available configuration options
# with their default values (in comments).
#
# This file is not a configuration example,
# it contains the exhaustive configuration with explanations of the options.

# Options for analysis running.
run:
  # The default concurrency value is the number of available CPU.
  concurrency: 4

  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 5m

  # Exit code when at least one issue was found.
  # Default: 1
  issues-exit-code: 2

  # Include test files or not.
  # Default: true
  # tests: false

  # List of build tags, all linters use it.
  # Default: [].
  # build-tags:
  #   - mytag

  # Which dirs to skip: issues from them won't be reported.
  # Can use regexp here: `generated.*`, regexp is applied on full path.
  # Default value is empty list,
  # but default dirs are skipped independently of this option's value (see skip-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  skip-dirs:
    # - src/external_libs
    # - autogenerated_by_my_lib

  # Enables skipping of directories:
  # - vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # Default: true
  # skip-dirs-use-default: false

  # Which files to skip: they will be analyzed, but issues from them won't be reported.
  # Default value is empty list,
  # but there is no need to include all autogenerated files,
  # we confidently recognize autogenerated files.
  # If it's not please let us know.
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  # skip-files:
    # - ".*\\.my\\.go$"
    # - lib/bad.go

  # If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #
  # Allowed values: readonly|vendor|mod
  # By default, it isn't set.
  modules-download-mode: readonly

  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: false

  # Define the Go version limit.
  # Mainly related to generics support in go1.18.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.17
  go: '1.17'


# output configuration options
output:
  # Format: colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  #
  # Multiple can be specified by separating them by comma, output can be provided
  # for each of them by separating format name and path by colon symbol.
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  # Example: "checkstyle:report.json,colored-line-number"
  #
  # Default: colored-line-number
  # format: json

  # Print lines of code with issue.
  # Default: true
  # print-issued-lines: false

  # Print linter name in the end of issue text.
  # Default: true
  # print-linter-name: false

  # Make issues output unique by line.
  # Default: true
  # uniq-by-line: false

  # Add a prefix to the output file references.
  # Default is no prefix.
  path-prefix: ""

  # Sort results by: filepath, line and column.
  # sort-results: false


# All available settings of specific linters.
linters-settings:
  asasalint:
    # To specify a set of function names to exclude.
    # The values are merged with the builtin exclusions.
    # The builtin exclusions can be disabled by setting `use-builtin-exclusions` to `false`.
    # Default: ["^(fmt|log|logger|t|)\.(Print|Fprint|Sprint|Fatal|Panic|Error|Warn|Warning|Info|Debug|Log)(|f|ln)$"]
    # exclude:
    #   - Append
    #   - \.Wrapf
    # To enable/disable the asasalint builtin exclusions of function names.
    # See the default value of `exclude` to get the builtin exclusions.
    # Default: true
    # use-builtin-exclusions: false
    # Ignore *_test.go files.
    # Default: false
    # ignore-test: true

  cyclop:
    # The maximal code complexity to report.
    # Default: 10
    max-complexity: 15
    # The maximal average package complexity.
    # If it's higher than 0.0 (float) the check is enabled
    # Default: 0.0
    package-average: 3.5
    # Should ignore tests.
    # Default: false
    skip-tests: true

  dogsled:
    # Checks assignments with too many blank identifiers.
    # Default: 2
    max-blank-identifiers: 3

  dupl:
    # Tokens count to trigger issue.
    # Default: 150
    # threshold: 100

  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    # Such cases aren't reported by default.
    # Default: false
    check-type-assertions: true

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`.
    # Such cases aren't reported by default.
    # Default: false
    check-blank: true

    # To disable the errcheck built-in exclude list.
    # See `-excludeonly` option in https://github.com/kisielk/errcheck#excluding-functions for details.
    # Default: false
    disable-default-exclusions: true

    # List of functions to exclude from checking, where each entry is a single function to exclude.
    # See https://github.com/kisielk/errcheck#excluding-functions for details.
    #exclude-functions:
    #  - io/ioutil.ReadFile
    #  - io.Copy(*bytes.Buffer)
    #  - io.Copy(os.Stdout)

  errchkjson:
    # With check-error-free-encoding set to true, errchkjson does warn about errors
    # from json encoding functions that are safe to be ignored,
    # because they are not possible to happen.
    #
    # if check-error-free-encoding is set to true and errcheck linter is enabled,
    # it is recommended to add the following exceptions to prevent from false positives:
    #
    #     linters-settings:
    #       errcheck:
    #         exclude-functions:
    #           - encoding/json.Marshal
    #           - encoding/json.MarshalIndent
    #
    # Default: false
    check-error-free-encoding: true

    # Issue on struct encoding that doesn't have exported fields.
    # Default: false
    report-no-exported: true

  gci:
    # Section configuration to compare against.
    # Section names are case-insensitive and may contain parameters in ().
    # The order of sections is always `standard > default > custom`,
    # it cannot be changed and doesn't follow the order of `sections` option.
    # Default: ["standard", "default"]
    sections:
      - standard                       # Standard section: captures all standard packages.
      - default                        # Default section: contains all imports that could not be matched to another section type.
      - prefix(github.com/seborama) # Custom section: groups all imports with the specified Prefix.

    # Skip generated files.
    # Default: true
    #skip-generated: false

  gocognit:
    # Minimal code complexity to report
    # Default: 30 (but we recommend 10-20)
    min-complexity: 15

  gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks'.
    # See https://go-critic.github.io/overview#checks-overview.
    # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`.
    # By default, list of stable checks is used.
    enabled-checks:
      - captLocal
      - elseif
      - hugeParam
      - nestingReduce
      - rangeExprCopy
      - rangeValCopy
      - ruleguard
      - tooManyResultsChecker
      - truncateCmp
      - underef
      - unnamedResult


    # Which checks should be disabled; can't be combined with 'enabled-checks'.
    # Default: []
    disabled-checks:

    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
    # See https://github.com/go-critic/go-critic#usage -> section "Tags".
    # Default: []
    enabled-tags:
      # - diagnostic
      # - style
      # - performance
      # - experimental
      # - opinionated
    disabled-tags:
      # - diagnostic
      # - style
      # - performance
      # - experimental
      # - opinionated

    # Settings passed to gocritic.
    # The settings key is the name of a supported gocritic checker.
    # The list of supported checkers can be find in https://go-critic.github.io/overview.
    settings:
      # Must be valid enabled check name.
      captLocal:
        # Whether to restrict checker to params only.
        # Default: true
        # paramsOnly: false
      elseif:
        # Whether to skip balanced if-else pairs.
        # Default: true
        # skipBalanced: false
      hugeParam:
        # Size in bytes that makes the warning trigger.
        # Default: 80
        # sizeThreshold: 70
      nestingReduce:
        # Min number of statements inside a branch to trigger a warning.
        # Default: 5
        # bodyWidth: 4
      rangeExprCopy:
        # Size in bytes that makes the warning trigger.
        # Default: 512
        # sizeThreshold: 516
        # Whether to check test functions
        # Default: true
        skipTestFuncs: false
      rangeValCopy:
        # Size in bytes that makes the warning trigger.
        # Default: 128
        # sizeThreshold: 32
        # Whether to check test functions.
        # Default: true
        skipTestFuncs: false
      tooManyResultsChecker:
        # Maximum number of results.
        # Default: 5
        maxResults: 10
      truncateCmp:
        # Whether to skip int/uint/uintptr types.
        # Default: true
        skipArchDependent: false
      underef:
        # Whether to skip (*x).method() calls where x is a pointer receiver.
        # Default: true
        skipRecvDeref: false
      unnamedResult:
        # Whether to check exported functions.
        # Default: false
        checkExported: true

  gocyclo:
    # Minimal code complexity to report.
    # Default: 30 (but we recommend 10-20)
    min-complexity: 15

  godot:
    # Comments to be checked: `declarations`, `toplevel`, or `all`.
    # Default: declarations
    scope: all
    # List of regexps for excluding particular comment lines from check.
    # Default: []
    exclude:
      # Exclude todo and fixme comments.
      - "^fixme:"
      - "^todo:"
    # Check that each sentence ends with a period.
    # Default: true
    period: false
    # Check that each sentence starts with a capital letter.
    # Default: false
    # capital: true

  gofmt:
    # Simplify code: gofmt with `-s` option.
    # Default: true
    # simplify: false

  gofumpt:
    # Select the Go version to target.
    # Default: "1.15"
    # Deprecated: use the global `run.go` instead.
    #lang-version: "1.17"

    # Module path which contains the source code being formatted.
    # Default: ""
    # module-path: github.com/org/project

    # Choose whether to use the extra rules.
    # Default: false
    extra-rules: true

  goimports:
    # Put imports beginning with prefix after 3rd-party packages.
    # It's a comma-separated list of prefixes.
    # Default: ""
    local-prefixes: github.com/seborama

  gosimple:
    # https://staticcheck.io/docs/options#checks
    # Default: ["*"]
    checks: [ "all" ]

  gosec:
    # To select a subset of rules to run.
    # Available rules: https://github.com/securego/gosec#available-rules
    # Default: [] - means include all rules
    # includes:

    # To specify a set of rules to explicitly exclude.
    # Available rules: https://github.com/securego/gosec#available-rules
    # Default: []
    # excludes:

    # Exclude generated files
    # Default: false
    exclude-generated: true

    # Filter out the issues with a lower severity than the given value.
    # Valid options are: low, medium, high.
    # Default: low
    severity: medium

    # Filter out the issues with a lower confidence than the given value.
    # Valid options are: low, medium, high.
    # Default: low
    confidence: medium

    # Concurrency value.
    # Default: the number of logical CPUs usable by the current process.
    # concurrency: 12

    # To specify the configuration of rules.
    config:
      # Globals are applicable to all rules.
      global:
        # If true, ignore #nosec in comments (and an alternative as well).
        # Default: false
        nosec: true
        # Add an alternative comment prefix to #nosec (both will work at the same time).
        # Default: ""
        "#nosec": "#my-custom-nosec"
        # Define whether nosec issues are counted as finding or not.
        # Default: false
        show-ignored: true
        # Audit mode enables addition checks that for normal code analysis might be too nosy.
        # Default: false
        audit: true
      G101:
        # Regexp pattern for variables and constants to find.
        # Default: "(?i)passwd|pass|password|pwd|secret|token|pw|apiKey|bearer|cred"
        pattern: "(?i)example"
        # If true, complain about all cases (even with low entropy).
        # Default: false
        ignore_entropy: false
        # Maximum allowed entropy of the string.
        # Default: "80.0"
        entropy_threshold: "80.0"
        # Maximum allowed value of entropy/string length.
        # Is taken into account if entropy >= entropy_threshold/2.
        # Default: "3.0"
        per_char_threshold: "3.0"
        # Calculate entropy for first N chars of the string.
        # Default: "16"
        truncate: "32"
      # Additional functions to ignore while checking unhandled errors.
      # Following functions always ignored:
      #   bytes.Buffer:
      #     - Write
      #     - WriteByte
      #     - WriteRune
      #     - WriteString
      #   fmt:
      #     - Print
      #     - Printf
      #     - Println
      #     - Fprint
      #     - Fprintf
      #     - Fprintln
      #   strings.Builder:
      #     - Write
      #     - WriteByte
      #     - WriteRune
      #     - WriteString
      #   io.PipeWriter:
      #     - CloseWithError
      #   hash.Hash:
      #     - Write
      #   os:
      #     - Unsetenv
      # Default: {}
      G104:
        fmt:
          - Fscanf
      G111:
        # Regexp pattern to find potential directory traversal.
        # Default: "http\\.Dir\\(\"\\/\"\\)|http\\.Dir\\('\\/'\\)"
        pattern: "custom\\.Dir\\(\\)"
      # Maximum allowed permissions mode for os.Mkdir and os.MkdirAll
      # Default: "0750"
      G301: "0750"
      # Maximum allowed permissions mode for os.OpenFile and os.Chmod
      # Default: "0600"
      G302: "0600"
      # Maximum allowed permissions mode for os.WriteFile and ioutil.WriteFile
      # Default: "0600"
      G306: "0600"

  govet:
    # Report about shadowed variables.
    # Default: false
    check-shadowing: true

    # Settings per analyzer.
    settings:
      # Analyzer name, run `go tool vet help` to see all analyzers.

    # Enable all analyzers.
    # Default: false
    enable-all: true
    # Disable analyzers by name.
    # Run `go tool vet help` to see all analyzers.
    # Default: []
    disable:
      # - asmdecl
      # - assign
      # - bools
      # - buildtag
      # - cgocall
      # - composites
      # - deepequalerrors
      # - errorsas
      # - findcall
      # - framepointer
      # - httpresponse
      # - ifaceassert
      # - nilfunc
      # - nilness
      # - printf
      # - reflectvaluecompare
      # - shift
      # - sigchanyzer
      # - sortslice
      # - stdmethods
      # - stringintconv
      # - testinggoroutine
      # - tests
      # - unmarshal
      # - unreachable
      # - unsafeptr
      # - unusedresult
      # - unusedwrite

  ireturn:
    # ireturn allows using `allow` and `reject` settings at the same time.
    # Both settings are lists of the keywords and regular expressions matched to interface or package names.
    # keywords:
    # - `empty` for `interface{}`
    # - `error` for errors
    # - `stdlib` for standard library
    # - `anon` for anonymous interfaces

    # By default, it allows using errors, empty interfaces, anonymous interfaces,
    # and interfaces provided by the standard library.
    allow:
      - anon
      - error
      - empty
      - stdlib
      # You can specify idiomatic endings for interface
      - (or|er)$

    # reject-list of interfaces
    # reject:
    #   - github.com\/user\/package\/v4\.Type

  maintidx:
    # Show functions with maintainability index lower than N.
    # A high index indicates better maintainability (it's kind of the opposite of complexity).
    # Default: 20
    # under: 100

  nestif:
    # Minimal complexity of if statements to report.
    # Default: 5
    min-complexity: 4

  nilnil:
    # Checks that there is no simultaneous return of `nil` error and an invalid value.
    # Default: ["ptr", "func", "iface", "map", "chan"]
    checked-types:
      - ptr
      - func
      - iface
      - map
      - chan

  rowserrcheck:
    # database/sql is always checked
    # Default: []
    packages:
      # - github.com/jmoiron/sqlx

  staticcheck:
    # Select the Go version to target.
    # Default: "1.13"
    # Deprecated: use the global `run.go` instead.
    # go: "1.15"
    # https://staticcheck.io/docs/options#checks
    # Default: ["*"]
    checks: [ "all" ]

  stylecheck:
    # Select the Go version to target.
    # Default: 1.13
    # Deprecated: use the global `run.go` instead.
    # go: "1.15"
    # https://staticcheck.io/docs/options#checks
    # Default: ["*"]
    # checks: [ "all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022" ]
    checks: [ "all", "-ST1003", "-ST1016" ]
    # https://staticcheck.io/docs/options#dot_import_whitelist
    # Default: ["github.com/mmcloughlin/avo/build", "github.com/mmcloughlin/avo/operand", "github.com/mmcloughlin/avo/reg"]
    dot-import-whitelist:
      - fmt
    # https://staticcheck.io/docs/options#initialisms
    # Default: ["ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "QPS", "RAM", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "GID", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS", "SIP", "RTP", "AMQP", "DB", "TS"]
    initialisms: [ "ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "QPS", "RAM", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "GID", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS", "SIP", "RTP", "AMQP", "DB", "TS" ]
    # https://staticcheck.io/docs/options#http_status_code_whitelist
    # Default: ["200", "400", "404", "500"]
    http-status-code-whitelist: [ "200", "400", "404", "500" ]

  tagliatelle:
    # Check the struck tag name case.
    case:
      # Use the struct field name to check the name of the struct tag.
      # Default: false
      use-field-name: true
      # `camel` is used for `json` and `yaml` (can be overridden)
      # Default: {}
      rules:
        # Any struct tag type can be used.
        # Support string case: `camel`, `pascal`, `kebab`, `snake`, `goCamel`, `goPascal`, `goKebab`, `goSnake`, `upper`, `lower`
        json: camel
        yaml: camel
        xml: camel
        bson: camel
        avro: snake
        mapstructure: kebab

  tenv:
    # The option `all` will run against whole test files (`_test.go`) regardless of method/function signatures.
    # Otherwise, only methods that take `*testing.T`, `*testing.B`, and `testing.TB` as arguments are checked.
    # Default: false
    all: false

  unparam:
    # Inspect exported functions.
    #
    # Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    #
    # Default: false
    check-exported: true

linters:
  # Disable all linters.
  # Default: false
  disable-all: true
  # Enable specific linter
  # https://golangci-lint.run/usage/linters/#enabled-by-default-linters
  enable:
    # - asciicheck
    # - bidichk
    - bodyclose
    - containedctx
    - contextcheck
    - cyclop
    # - decorder
    # - depguard
    - dogsled
    - dupl
    - durationcheck
    - errcheck
    - errchkjson
    # - errname
    # - errorlint
    # - exhaustive
    # - exhaustivestruct
    - exportloopref
    # - forbidigo
    # - forcetypeassert
    # - funlen
    - gci
    # - gochecknoglobals
    # - gochecknoinits
    - gocognit
    # - goconst
    - gocritic
    - gocyclo
    - godot
    # - godox
    - goerr113
    - gofmt
    - gofumpt
    # - goheader
    - goimports
    #- gomnd
    #- gomoddirectives
    #- gomodguard
    #- goprintffuncname
    - gosec
    - gosimple
    - govet
    #- grouper
    #- importas
    - ineffassign
    #- interfacer
    - ireturn
    #- lll
    - maintidx
    #- makezero
    #- nakedret
    - nestif
    - nilerr
    # - nilnil
    #- nlreturn
    #- noctx
    # - nolintlint
    #- paralleltest
    #- prealloc
    - predeclared
    #- promlinter
    # - revive
    - rowserrcheck
    #- scopelint
    - sqlclosecheck
    - staticcheck
    - stylecheck
    - tagliatelle
    - tenv
    # - testpackage
    - thelper
    # - tparallel
    - typecheck
    - unconvert
    - unparam
    - unused
    # - varnamelen
    # - wastedassign
    # - whitespace
    # - wrapcheck
    # - wsl

  # Run only fast linters from enabled linters set (first run won't be fast)
  # Default: false
  fast: false


issues:
  # List of regexps of issue texts to exclude.
  #
  # But independently of this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`.
  # To list all excluded by default patterns execute `golangci-lint run --help`
  #
  # Default: []
  #exclude:
  #  - abcdef

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - cyclop
        - errcheck
        - dupl
        - gocognit
        - gocyclo
        - goerr113
        - gosec

    - path: _test\.go
      text: "fieldalignment:"

    # Exclude known linters from partially hard-vendored code,
    # which is impossible to exclude via `nolint` comments.
    - path: internal/hmac/
      text: "weak cryptographic primitive"
      linters:
        - gosec

    # Exclude some `staticcheck` messages.
    - linters:
        - staticcheck
      text: "SA9003:"

    # Exclude `lll` issues for long lines with `go:generate`.
    - linters:
        - lll
      source: "^//go:generate "

  # Independently of option `exclude` we use default exclude patterns,
  # it can be disabled by this option.
  # To list all excluded by default patterns execute `golangci-lint run --help`.
  # Default: true.
  # exclude-use-default: false

  # If set to true exclude and exclude-rules regular expressions become case-sensitive.
  # Default: false
  exclude-case-sensitive: false

  # The list of ids of default excludes to include or disable.
  # Default: []
  # include:
  #   - EXC0002 # disable excluding of issues about comments from golint.

  # Maximum issues count per one linter.
  # Set to 0 to disable.
  # Default: 50
  max-issues-per-linter: 0

  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing large codebase.
  # It's not practical to fix all existing issues at the moment of integration:
  # much better don't allow issues in new code.
  #
  # Default: false.
  # new: true

  # Show only new issues created after git revision `REV`.
  # new-from-rev: HEAD

  # Fix found issues (if it's supported by the linter).
  # fix: true


severity:
  # Set the default severity for issues.
  #
  # If severity rules are defined and the issues do not match or no severity is provided to the rule
  # this will be the default severity applied.
  # Severities should match the supported severity names of the selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # - Checkstyle: https://checkstyle.sourceforge.io/property_types.html#severity
  # - GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  #
  # Default value is an empty string.
  # default-severity: error
  default-severity: warning

  # If set to true `severity-rules` regular expressions become case-sensitive.
  # Default: false
  case-sensitive: false

  # When a list of severity rules are provided, severity information will be added to lint issues.
  # Severity rules have the same filtering capability as exclude rules
  # except you are allowed to specify one matcher per severity rule.
  # Only affects out formats that support setting severity information.
  #
  # Default: []
  rules:
    - linters:
      - dupl
      severity: info
